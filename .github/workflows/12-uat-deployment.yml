name: Deploy UAT (Frontend + Backend via DOCR)

on:
  push:
    branches: [ uat ]
  workflow_dispatch:

env:
  REGISTRY: ${{ vars.DOCR_REGISTRY }}            # e.g. registry.digitalocean.com/meatscentral
  FRONTEND_IMAGE: ${{ vars.DOCR_REPO_FRONTEND_UAT }} # e.g. projectmeats-frontend
  BACKEND_IMAGE:  ${{ vars.DOCR_REPO_BACKEND_UAT  }} # e.g. projectmeats-backend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [ frontend, backend ]
    steps:
      - uses: actions/checkout@v4

      - name: Login to DOCR
        run: echo "${{ secrets.DO_ACCESS_TOKEN }}" | docker login ${{ env.REGISTRY }} -u doctl --password-stdin

      - name: Build & Push Frontend
        if: matrix.app == 'frontend'
        run: |
          docker build -f frontend/Dockerfile \
            -t $REGISTRY/$FRONTEND_IMAGE:uat-${GITHUB_SHA::7} \
            -t $REGISTRY/$FRONTEND_IMAGE:uat-latest \
            .
          docker push $REGISTRY/$FRONTEND_IMAGE:uat-${GITHUB_SHA::7}
          docker push $REGISTRY/$FRONTEND_IMAGE:uat-latest

      - name: Build & Push Backend (Django)
        if: matrix.app == 'backend'
        run: |
          docker build -f backend/Dockerfile \
            -t $REGISTRY/$BACKEND_IMAGE:uat-${GITHUB_SHA::7} \
            -t $REGISTRY/$BACKEND_IMAGE:uat-latest \
            .
          docker push $REGISTRY/$BACKEND_IMAGE:uat-${GITHUB_SHA::7}
          docker push $REGISTRY/$BACKEND_IMAGE:uat-latest

  test-frontend:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      - working-directory: ./frontend
        run: npm ci
      - working-directory: ./frontend
        run: npm run test:ci
      - working-directory: ./frontend
        run: npm run type-check

  test-backend:
    runs-on: ubuntu-latest
    needs: build-and-push
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Setup test environment
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          SECRET_KEY: test-secret-key-for-testing-only
          DEBUG: True
        run: |
          python manage.py check
          python manage.py migrate
      - name: Run tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          SECRET_KEY: test-secret-key-for-testing-only
          DEBUG: True
        run: python manage.py test apps/
      - name: Code quality (non-blocking)
        working-directory: ./backend
        continue-on-error: true
        run: |
          if pip show flake8 >/dev/null 2>&1; then
            flake8 . --exclude=migrations --max-line-length=120 || true
          fi
          if pip show black >/dev/null 2>&1; then
            black --check . --exclude=migrations || true
          fi

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: [build-and-push, test-frontend]
    if: github.ref == 'refs/heads/uat'
    environment: uat2
    steps:
      - name: Setup SSH with password authentication
        run: |
          sudo apt-get update
          sudo apt-get install -y sshpass
          mkdir -p ~/.ssh
          ssh-keyscan -H "${{ secrets.STAGING_HOST }}" >> ~/.ssh/known_hosts

      - name: Deploy frontend container (8080 behind Nginx)
        env:
          SSHPASS: ${{ secrets.SSH_PASSWORD }}
        run: |
          sshpass -e ssh -o StrictHostKeyChecking=yes ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} <<'DEPLOY_SCRIPT'
          set -e

          sudo mkdir -p /opt/pm/frontend/env
          sudo bash -c 'cat > /opt/pm/frontend/env/env-config.js <<JS
          window.ENV = {
            API_BASE_URL: "${{ secrets.REACT_APP_API_BASE_URL }}",
            ENVIRONMENT: "staging"
          };
          JS'

          sudo docker login ${{ env.REGISTRY }} -u doctl -p ${{ secrets.DO_ACCESS_TOKEN }}
          sudo docker pull ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:uat-latest

          sudo docker rm -f pm-frontend >/dev/null 2>&1 || true
          sudo docker run -d --name pm-frontend --restart unless-stopped \
            -p 8080:80 \
            -v /opt/pm/frontend/env/env-config.js:/usr/share/nginx/html/env-config.js:ro \
            ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:uat-latest

          if command -v nginx >/dev/null 2>&1; then
            sudo bash -c 'cat > /etc/nginx/conf.d/pm-frontend.conf <<NGINX
            server {
              listen 80;
              server_name _;
              location / {
                proxy_pass http://127.0.0.1:8080;
                proxy_set_header Host \$host;
                proxy_set_header X-Real-IP \$remote_addr;
                proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto \$scheme;
              }
            }
            NGINX'
            sudo nginx -t && sudo systemctl reload nginx || true
          fi

          sudo docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}"
          DEPLOY_SCRIPT

      - name: Health check (Web)
        run: |
          sleep 8
          curl -fsS "${{ secrets.STAGING_URL }}" > /dev/null

  deploy-backend:
    runs-on: ubuntu-latest
    needs: [build-and-push, test-backend]
    if: github.ref == 'refs/heads/uat'
    environment: uat2-backend
    steps:
      - name: Setup SSH with password authentication
        run: |
          sudo apt-get update
          sudo apt-get install -y sshpass
          mkdir -p ~/.ssh
          ssh-keyscan -H "${{ secrets.STAGING_HOST }}" >> ~/.ssh/known_hosts

      - name: Deploy backend container (env at /home/django/ProjectMeats/backend/.env)
        env:
          SSHPASS: ${{ secrets.SSH_PASSWORD }}
        run: |
          sshpass -e ssh -o StrictHostKeyChecking=yes ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} <<'SSH'
          set -euo pipefail

          REG="${{ env.REGISTRY }}"
          IMG="${{ env.BACKEND_IMAGE }}"
          TAG="uat-latest"

          APP_DIR="/home/django/ProjectMeats/backend"
          MEDIA_DIR="/home/django/ProjectMeats/media"
          ENV_FILE="${APP_DIR}/.env"

          sudo mkdir -p "$APP_DIR" "$MEDIA_DIR"

          # Same env block as dev. Update values in UAT secrets later.
          sudo tee "$ENV_FILE" > /dev/null <<ENV

          DJANGO_SETTINGS_MODULE=${{ secrets.UAT_DJANGO_SETTINGS_MODULE }}
          SECRET_KEY=${{ secrets.UAT_SECRET_KEY }}
          CORS_ALLOWED_ORIGINS=${{ secrets.UAT_CORS_ALLOWED_ORIGINS }}
          DATABASE_URL=${{ secrets.UAT_DATABASE_URL }}
          ALLOWED_HOSTS=${{ secrets.UAT_ALLOWED_HOSTS }}
          DEBUG=${{ secrets.DEBUG }}
          LOG_LEVEL=${{ secrets.LOG_LEVEL }}
          CORS_ALLOW_ALL_ORIGINS=${{ secrets.UAT_CORS_ALLOW_ALL_ORIGINS }}
          SESSION_COOKIE_SECURE=${{ secrets.UAT_SESSION_COOKIE_SECURE }}
          CSRF_COOKIE_SECURE=${{ secrets.UAT_CSRF_COOKIE_SECURE }}
          OPENAI_API_KEY=${{ secrets.UAT_OPENAI_API_KEY }}
          STATIC_ROOT=${{ secrets.UAT_STATIC_ROOT }}
          MEDIA_ROOT=${{ secrets.UAT_MEDIA_ROOT }}
          EMAIL_BACKEND=${{ secrets.UAT_EMAIL_BACKEND }}
          EMAIL_HOST=${{ secrets.UAT_EMAIL_HOST }}
          EMAIL_PORT=${{ secrets.UAT_EMAIL_PORT }}
          EMAIL_USE_TLS=${{ secrets.UAT_EMAIL_USE_TLS }}
          EMAIL_HOST_USER=${{ secrets.UAT_EMAIL_HOST_USER }}
          EMAIL_HOST_PASSWORD=${{ secrets.UAT_EMAIL_HOST_PASSWORD }}
          ENV
          sudo chown root:root "$ENV_FILE"
          sudo chmod 600 "$ENV_FILE"

          echo "${{ secrets.DO_ACCESS_TOKEN }}" | sudo docker login "$REG" -u doctl --password-stdin
          sudo docker pull "$REG/$IMG:$TAG"

          sudo docker run --rm \
            --env-file "$ENV_FILE" \
            -v "$MEDIA_DIR:/app/media" \
            "$REG/$IMG:$TAG" \
            python manage.py migrate --noinput

          sudo docker run --rm \
            --env-file "$ENV_FILE" \
            -v "$MEDIA_DIR:/app/media" \
            "$REG/$IMG:$TAG" \
            python manage.py collectstatic --noinput || true

          sudo docker rm -f pm-backend >/dev/null 2>&1 || true
          sudo docker run -d --name pm-backend --restart unless-stopped \
            -p 8000:8000 \
            --env-file "$ENV_FILE" \
            -v "$MEDIA_DIR:/app/media" \
            "$REG/$IMG:$TAG"

          sudo docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}"
          SSH

      - name: Health check (Backend)
        run: |
          for i in {1..10}; do
            if curl -fsS "${{ secrets.STAGING_API_URL }}" > /dev/null; then
              echo "Backend healthy"
              exit 0
            fi
            sleep 3
          done
          echo "Backend health check failed" >&2
          exit 1
