# =============================================================================
# UNIFIED DEPLOYMENT WORKFLOW
# =============================================================================
# This workflow combines all 4 separate deployment workflows:
# - deploy-backend-production.yml
# - deploy-backend-staging.yml
# - deploy-frontend-production.yml
# - deploy-frontend-staging.yml
#
# It maintains the exact same behavior and triggering logic as the separate workflows
# =============================================================================

name: Unified Deployment Workflow

# =============================================================================
# TRIGGERS - Exactly matching the original 4 workflows
# =============================================================================
on:
  push:
    branches: [ main, development ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - '.github/workflows/unified-deployment.yml'
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
        - deploy
        - rollback

# =============================================================================
# JOBS
# =============================================================================
jobs:
  # ===========================================================================
  # BACKEND TESTING (for both staging and production)
  # ===========================================================================
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || contains(toJson(github.event.commits.*.modified), 'backend/') || contains(toJson(github.event.commits.*.added), 'backend/')

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: üîÑ Checkout code
      uses: actions/checkout@v4

    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: üì¶ Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: üì• Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: üîß Setup test environment
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        SECRET_KEY: test-secret-key-for-testing-only
        DEBUG: True
      run: |
        python manage.py check
        python manage.py migrate

    - name: üß™ Run tests
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        SECRET_KEY: test-secret-key-for-testing-only
        DEBUG: True
      run: |
        # Run tests for apps only (excludes root-level test files like test_allowed_hosts_fix.py)
        python manage.py test apps/

    - name: üîç Run code quality checks
      working-directory: ./backend
      continue-on-error: true  # Don't fail deployment on linting issues
      run: |
        # Run flake8 if available (non-blocking)
        if pip show flake8 >/dev/null 2>&1; then
          echo "Running flake8 linting..."
          flake8 . --exclude=migrations --max-line-length=120 || echo "‚ö†Ô∏è Flake8 found style issues (non-blocking)"
        fi

        # Run black check if available (non-blocking)
        if pip show black >/dev/null 2>&1; then
          echo "Running black formatting check..."
          black --check . --exclude=migrations || echo "‚ö†Ô∏è Black found formatting issues (non-blocking)"
        fi

        echo "‚úÖ Code quality checks completed (issues are non-blocking for deployment)"

  # ===========================================================================
  # FRONTEND TESTING (for both staging and production)
  # ===========================================================================
  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || contains(toJson(github.event.commits.*.modified), 'frontend/') || contains(toJson(github.event.commits.*.added), 'frontend/')

    steps:
    - name: üîÑ Checkout code
      uses: actions/checkout@v4

    - name: üì¶ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'

    - name: üì• Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: üß™ Run tests
      working-directory: ./frontend
      run: npm run test:ci

    - name: üîç Run type check
      working-directory: ./frontend
      run: npm run type-check

  # ===========================================================================
  # BACKEND STAGING DEPLOYMENT
  # ===========================================================================
  deploy-backend-staging:
    name: Deploy Backend to UAT2 Staging
    needs: test-backend
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/development' && (github.event_name == 'workflow_dispatch' || contains(toJson(github.event.commits.*.modified), 'backend/') || contains(toJson(github.event.commits.*.added), 'backend/'))
    environment: uat2-backend

    steps:
    - name: üîÑ Checkout code
      uses: actions/checkout@v4

    - name: üîê Setup SSH with password authentication
      run: |
        # Install sshpass for password authentication
        sudo apt-get update
        sudo apt-get install -y sshpass

        # Add host to known_hosts
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.STAGING_HOST }} >> ~/.ssh/known_hosts

    - name: üöÄ Deploy to UAT2 staging server
      env:
        SSHPASS: ${{ secrets.SSH_PASSWORD }}
        GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
      run: |
        # Create deployment script with GitHub token
        cat > deploy_script.sh << DEPLOY_SCRIPT
        #!/bin/bash
        set -e

        echo "üîÑ Starting UAT2 Backend deployment..."

        # Navigate to project directory
        cd /home/django/ProjectMeats

        # Create backup of current deployment
        echo "üì¶ Creating backup..."
        if [ -d "backend_backup" ]; then
          rm -rf backend_backup
        fi
        cp -r backend backend_backup

        # Configure git with token authentication
        echo "üîê Configuring git authentication..."
        git remote set-url origin https://\${GIT_TOKEN}@github.com/Meats-Central/ProjectMeats.git

        # Pull latest changes from development branch
        echo "üì• Pulling latest changes..."

        # Clean up any local changes and untracked files
        echo "üßπ Cleaning local changes..."
        git stash push -m "Deployment backup \$(date)" || true
        git clean -fd

        # Fetch and reset to latest development
        git fetch origin development
        git checkout development
        git reset --hard origin/development

        echo "‚úÖ Successfully updated to latest development branch"

        # Navigate to backend directory and activate virtual environment
        echo "üêç Activating virtual environment..."
        cd backend
        source venv/bin/activate

        # Install/update dependencies
        echo "üì¶ Installing dependencies..."
        pip install -r requirements.txt

        # Run migrations
        echo "üóÉÔ∏è Running database migrations..."
        python manage.py migrate

        # Collect static files
        echo "üìÅ Collecting static files..."
        python manage.py collectstatic --noinput

        # Test Django configuration
        echo "üß™ Testing Django configuration..."
        python manage.py check

        echo "‚úÖ Backend deployment completed successfully!"
        DEPLOY_SCRIPT

        # Upload and execute deployment script
        sshpass -e scp deploy_script.sh ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }}:/tmp/
        sshpass -e ssh ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} "chmod +x /tmp/deploy_script.sh && /tmp/deploy_script.sh"

    - name: üîÑ Restart backend services
      env:
        SSHPASS: ${{ secrets.SSH_PASSWORD }}
      run: |
        sshpass -e ssh ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} << 'RESTART_SCRIPT'
        echo "üîÑ Restarting backend services..."

        # Restart gunicorn via supervisor
        sudo supervisorctl restart projectmeats-staging

        # Wait a moment for service to start
        sleep 5

        # Check service status
        sudo supervisorctl status projectmeats-staging

        # Restart nginx
        sudo systemctl reload nginx

        echo "‚úÖ Services restarted successfully!"
        RESTART_SCRIPT

    - name: üè• Health check
      run: |
        echo "üè• Performing health check..."
        sleep 15  # Wait for services to fully start

        # Health check with retry logic
        for i in {1..5}; do
          echo "Health check attempt $i/5..."
          if curl -f -s "${{ secrets.STAGING_API_URL }}/api/v1/health/" > /dev/null; then
            echo "‚úÖ UAT2 Backend is healthy!"
            break
          else
            if [ $i -eq 5 ]; then
              echo "‚ùå UAT2 Backend health check failed after 5 attempts"
              exit 1
            fi
            echo "Retrying in 10 seconds..."
            sleep 10
          fi
        done

    - name: üìß Deployment notification
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ UAT2 Backend deployment successful!"
          echo "üåê API URL: ${{ secrets.STAGING_API_URL }}"
          echo "üìù Commit: ${{ github.sha }}"
          echo "üë§ Author: ${{ github.actor }}"
          echo "üïí Time: $(date)"
        else
          echo "‚ùå UAT2 Backend deployment failed!"
          echo "üìù Commit: ${{ github.sha }}"
          echo "üë§ Author: ${{ github.actor }}"
          echo "üïí Time: $(date)"
          echo "üîç Check the logs above for details"
        fi

  # ===========================================================================
  # BACKEND PRODUCTION DEPLOYMENT
  # ===========================================================================
  deploy-backend-production:
    name: Deploy Backend to Production
    needs: test-backend
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event_name == 'workflow_dispatch' || contains(toJson(github.event.commits.*.modified), 'backend/') || contains(toJson(github.event.commits.*.added), 'backend/'))
    environment: prod2-backend

    steps:
    - name: üîÑ Checkout code
      uses: actions/checkout@v4

    - name: üîê Setup SSH with password authentication
      run: |
        # Install sshpass for password authentication
        sudo apt-get update
        sudo apt-get install -y sshpass

        # Add host to known_hosts
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.PRODUCTION_HOST }} >> ~/.ssh/known_hosts

    - name: üöÄ Deploy to Production server
      env:
        SSHPASS: ${{ secrets.SSH_PASSWORD }}
        GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
      run: |
        # Create deployment script with GitHub token
        cat > deploy_script.sh << DEPLOY_SCRIPT
        #!/bin/bash
        set -e

        echo "üîÑ Starting PRODUCTION Backend deployment..."

        # Navigate to project directory
        cd /home/django/ProjectMeats

        # Create backup of current deployment
        echo "üì¶ Creating backup..."
        if [ -d "backend_backup" ]; then
          rm -rf backend_backup
        fi
        cp -r backend backend_backup

        # Configure git with token authentication
        echo "üîê Configuring git authentication..."
        git remote set-url origin https://oauth2:\${GIT_TOKEN}@github.com/Meats-Central/ProjectMeats.git

        # Pull latest changes from main branch
        echo "üì• Pulling latest changes from main branch..."

        # Clean up any local changes and untracked files
        echo "üßπ Cleaning local changes..."
        git stash push -m "Production deployment backup \$(date)" || true
        git clean -fd

        # Fetch and reset to latest main branch
        git fetch origin main
        git checkout main
        git reset --hard origin/main

        echo "‚úÖ Successfully updated to latest main branch"

        # Navigate to backend directory and activate virtual environment
        echo "üêç Activating virtual environment..."
        cd backend
        source venv/bin/activate

        # Install/update dependencies
        echo "üì¶ Installing dependencies..."
        pip install -r requirements.txt

        # Run migrations
        echo "üóÉÔ∏è Running database migrations..."
        python manage.py migrate

        # Collect static files
        echo "üìÅ Collecting static files..."
        python manage.py collectstatic --noinput

        # Test Django configuration
        echo "üß™ Testing Django configuration..."
        python manage.py check --deploy

        echo "‚úÖ Production backend deployment completed successfully!"
        DEPLOY_SCRIPT

        # Upload and execute deployment script
        sshpass -e scp deploy_script.sh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }}:/tmp/
        sshpass -e ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} "chmod +x /tmp/deploy_script.sh && /tmp/deploy_script.sh"

    - name: üîÑ Restart production services
      env:
        SSHPASS: ${{ secrets.SSH_PASSWORD }}
      run: |
        sshpass -e ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'RESTART_SCRIPT'
        echo "üîÑ Restarting production backend services..."

        # Restart gunicorn via supervisor
        sudo supervisorctl restart projectmeats-production

        # Wait a moment for service to start
        sleep 10

        # Check service status
        sudo supervisorctl status projectmeats-production

        # Restart nginx
        sudo systemctl reload nginx

        echo "‚úÖ Production services restarted successfully!"
        RESTART_SCRIPT

    - name: üè• Health check
      run: |
        echo "üè• Performing production health check..."
        sleep 20  # Wait for services to fully start

        # Health check with retry logic
        for i in {1..10}; do
          echo "Health check attempt $i/10..."
          if curl -f -s "${{ secrets.PRODUCTION_API_URL }}/api/v1/health/" > /dev/null; then
            echo "‚úÖ Production Backend is healthy!"
            break
          else
            if [ $i -eq 10 ]; then
              echo "‚ùå Production Backend health check failed after 10 attempts"
              echo "üö® PRODUCTION DEPLOYMENT MAY HAVE FAILED!"
              exit 1
            fi
            echo "Retrying in 15 seconds..."
            sleep 15
          fi
        done

    - name: üìß Production deployment notification
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "üéâ PRODUCTION Backend deployment SUCCESSFUL! üéâ"
          echo "üåê Production API URL: ${{ secrets.PRODUCTION_API_URL }}"
          echo "üìù Commit: ${{ github.sha }}"
          echo "üë§ Author: ${{ github.actor }}"
          echo "üïí Time: $(date)"
          echo "üöÄ Production is now live with latest changes!"
        else
          echo "üö® PRODUCTION Backend deployment FAILED! üö®"
          echo "üìù Commit: ${{ github.sha }}"
          echo "üë§ Author: ${{ github.actor }}"
          echo "üïí Time: $(date)"
          echo "‚ö†Ô∏è Please check logs and potentially rollback!"
        fi

  # ===========================================================================
  # FRONTEND STAGING DEPLOYMENT
  # ===========================================================================
  deploy-frontend-staging:
    name: Deploy Frontend to UAT2 Staging
    needs: test-frontend
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/development' && (github.event_name == 'workflow_dispatch' || contains(toJson(github.event.commits.*.modified), 'frontend/') || contains(toJson(github.event.commits.*.added), 'frontend/'))
    environment: uat2

    steps:
    - name: üîÑ Checkout code
      uses: actions/checkout@v4

    - name: üì¶ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'

    - name: üì• Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: üèóÔ∏è Create production .env file
      working-directory: ./frontend
      run: |
        cat > .env.production << EOF
        REACT_APP_API_BASE_URL=${{ secrets.REACT_APP_API_BASE_URL }}
        NODE_ENV=production
        REACT_APP_ENVIRONMENT=staging
        REACT_APP_AI_ASSISTANT_ENABLED=${{ secrets.REACT_APP_AI_ASSISTANT_ENABLED }}
        REACT_APP_ENABLE_DOCUMENT_UPLOAD=${{ secrets.REACT_APP_ENABLE_DOCUMENT_UPLOAD }}
        REACT_APP_ENABLE_CHAT_EXPORT=${{ secrets.REACT_APP_ENABLE_CHAT_EXPORT }}
        REACT_APP_MAX_FILE_SIZE=${{ secrets.REACT_APP_MAX_FILE_SIZE }}
        REACT_APP_SUPPORTED_FILE_TYPES=${{ secrets.REACT_APP_SUPPORTED_FILE_TYPES }}
        REACT_APP_ENABLE_DEBUG=${{ secrets.REACT_APP_ENABLE_DEBUG }}
        REACT_APP_ENABLE_DEVTOOLS=${{ secrets.REACT_APP_ENABLE_DEVTOOLS }}
        EOF

    - name: üèóÔ∏è Build React app
      working-directory: ./frontend
      run: npm run build

    - name: üì¶ Create deployment archive
      run: |
        cd frontend/build
        tar -czf ../../frontend-build.tar.gz .

    - name: üîê Setup SSH with password authentication
      run: |
        # Install sshpass for password authentication
        sudo apt-get update
        sudo apt-get install -y sshpass

        # Add host to known_hosts
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.STAGING_HOST }} >> ~/.ssh/known_hosts

    - name: üöÄ Deploy to UAT2 staging server
      env:
        SSHPASS: ${{ secrets.SSH_PASSWORD }}
      run: |
        # Upload build to server using sshpass
        sshpass -e scp frontend-build.tar.gz ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }}:/tmp/

        # Deploy via SSH using sshpass
        sshpass -e ssh ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} << 'DEPLOY_SCRIPT'
          set -e

          echo "üîÑ Starting UAT2 deployment..."

          # Create backup
          if [ -d "/var/www/ProjectMeats/frontend/build" ]; then
            echo "üì¶ Creating backup..."
            sudo cp -r /var/www/ProjectMeats/frontend/build /var/www/ProjectMeats/frontend/build.backup.$(date +%Y%m%d_%H%M%S)
          fi

          # Deploy new build
          echo "üöÄ Deploying new build..."
          cd /tmp
          mkdir -p frontend-build-new
          tar -xzf frontend-build.tar.gz -C frontend-build-new/

          sudo rm -rf /var/www/ProjectMeats/frontend/build
          sudo mkdir -p /var/www/ProjectMeats/frontend/build
          sudo cp -r frontend-build-new/* /var/www/ProjectMeats/frontend/build/

          # Set permissions
          sudo chown -R www-data:www-data /var/www/ProjectMeats/frontend/build
          sudo chmod -R 755 /var/www/ProjectMeats/frontend/build

          # Test nginx and reload
          sudo nginx -t && sudo systemctl reload nginx

          # Cleanup
          rm -rf /tmp/frontend-build.tar.gz /tmp/frontend-build-new

          echo "‚úÖ UAT2 deployment completed!"
        DEPLOY_SCRIPT

    - name: üè• Health check
      run: |
        sleep 10
        if curl -f -s "${{ secrets.STAGING_URL }}" > /dev/null; then
          echo "‚úÖ UAT2 frontend is healthy"
        else
          echo "‚ùå UAT2 frontend health check failed"
          exit 1
        fi

    - name: üßπ Cleanup
      if: always()
      run: rm -f frontend-build.tar.gz

  # ===========================================================================
  # FRONTEND PRODUCTION DEPLOYMENT
  # ===========================================================================
  deploy-frontend-production:
    name: Deploy Frontend to Production
    needs: test-frontend
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event_name == 'workflow_dispatch' || contains(toJson(github.event.commits.*.modified), 'frontend/') || contains(toJson(github.event.commits.*.added), 'frontend/'))
    environment: prod2-frontend

    steps:
    - name: üîÑ Checkout code
      uses: actions/checkout@v4

    - name: üì¶ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'

    - name: üì• Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: üèóÔ∏è Create production .env file
      working-directory: ./frontend
      run: |
        cat > .env.production << EOF
        REACT_APP_API_BASE_URL=${{ secrets.REACT_APP_API_BASE_URL }}
        NODE_ENV=production
        REACT_APP_ENVIRONMENT=production
        REACT_APP_AI_ASSISTANT_ENABLED=${{ secrets.REACT_APP_AI_ASSISTANT_ENABLED }}
        REACT_APP_ENABLE_DOCUMENT_UPLOAD=${{ secrets.REACT_APP_ENABLE_DOCUMENT_UPLOAD }}
        REACT_APP_ENABLE_CHAT_EXPORT=${{ secrets.REACT_APP_ENABLE_CHAT_EXPORT }}
        REACT_APP_MAX_FILE_SIZE=${{ secrets.REACT_APP_MAX_FILE_SIZE }}
        REACT_APP_SUPPORTED_FILE_TYPES=${{ secrets.REACT_APP_SUPPORTED_FILE_TYPES }}
        REACT_APP_ENABLE_DEBUG=false
        REACT_APP_ENABLE_DEVTOOLS=false
        EOF

    - name: üèóÔ∏è Build React app for production
      working-directory: ./frontend
      run: |
        echo "Building React application for PRODUCTION..."
        npm run build

    - name: üì¶ Create deployment archive
      run: |
        cd frontend/build
        tar -czf ../../frontend-build.tar.gz .

    - name: üîê Setup SSH with password authentication
      run: |
        # Install sshpass for password authentication
        sudo apt-get update
        sudo apt-get install -y sshpass

        # Add host to known_hosts
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.PRODUCTION_HOST }} >> ~/.ssh/known_hosts

    - name: üöÄ Deploy to Production frontend server
      env:
        SSHPASS: ${{ secrets.SSH_PASSWORD }}
      run: |
        # Upload build to server
        sshpass -e scp frontend-build.tar.gz ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }}:/tmp/

        # Deploy via SSH
        sshpass -e ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'DEPLOY_SCRIPT'
        set -e

        echo "üîÑ Starting PRODUCTION Frontend deployment..."

        # Create backup
        if [ -d "/var/www/ProjectMeats/frontend/build" ]; then
          echo "üì¶ Creating backup..."
          sudo cp -r /var/www/ProjectMeats/frontend/build /var/www/ProjectMeats/frontend/build.backup.$(date +%Y%m%d_%H%M%S)
        fi

        # Deploy new build
        echo "üöÄ Deploying new production build..."
        cd /tmp
        mkdir -p frontend-build-new
        tar -xzf frontend-build.tar.gz -C frontend-build-new/

        sudo rm -rf /var/www/ProjectMeats/frontend/build
        sudo mkdir -p /var/www/ProjectMeats/frontend/build
        sudo cp -r frontend-build-new/* /var/www/ProjectMeats/frontend/build/

        # Set permissions
        sudo chown -R www-data:www-data /var/www/ProjectMeats/frontend/build
        sudo chmod -R 755 /var/www/ProjectMeats/frontend/build

        # Test nginx and reload
        sudo nginx -t && sudo systemctl reload nginx

        # Cleanup
        rm -rf /tmp/frontend-build.tar.gz /tmp/frontend-build-new

        echo "‚úÖ PRODUCTION Frontend deployment completed!"
        DEPLOY_SCRIPT

    - name: üè• Health check
      run: |
        echo "üè• Performing production health check..."
        sleep 15  # Wait for services to start

        # Health check with retry logic
        for i in {1..8}; do
          echo "Health check attempt $i/8..."
          if curl -f -s "${{ secrets.PRODUCTION_URL }}" > /dev/null; then
            echo "‚úÖ PRODUCTION Frontend is healthy!"
            break
          else
            if [ $i -eq 8 ]; then
              echo "‚ùå PRODUCTION Frontend health check failed after 8 attempts"
              echo "üö® PRODUCTION DEPLOYMENT MAY HAVE FAILED!"
              exit 1
            fi
            echo "Retrying in 10 seconds..."
            sleep 10
          fi
        done

    - name: üßπ Cleanup
      if: always()
      run: rm -f frontend-build.tar.gz

    - name: üìß Production deployment notification
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "üéâ PRODUCTION Frontend deployment SUCCESSFUL! üéâ"
          echo "üåê Production URL: ${{ secrets.PRODUCTION_URL }}"
          echo "üìù Commit: ${{ github.sha }}"
          echo "üë§ Author: ${{ github.actor }}"
          echo "üïí Time: $(date)"
          echo "üöÄ Production website is now live with latest changes!"
        else
          echo "üö® PRODUCTION Frontend deployment FAILED! üö®"
          echo "üìù Commit: ${{ github.sha }}"
          echo "üë§ Author: ${{ github.actor }}"
          echo "üïí Time: $(date)"
          echo "‚ö†Ô∏è Please check logs and potentially rollback!"
        fi

  # ===========================================================================
  # ROLLBACK JOBS (Manual trigger only)
  # ===========================================================================
  rollback-backend-staging:
    name: Rollback Backend Staging
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'rollback'
    environment: uat2-backend

    steps:
    - name: üîê Setup SSH with password authentication
      run: |
        sudo apt-get update
        sudo apt-get install -y sshpass
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.STAGING_HOST }} >> ~/.ssh/known_hosts

    - name: ‚è™ Rollback to previous version
      env:
        SSHPASS: ${{ secrets.SSH_PASSWORD }}
      run: |
        sshpass -e ssh ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} << 'ROLLBACK_SCRIPT'
        set -e

        echo "üîÑ Starting rollback process..."

        cd /home/django/ProjectMeats

        # Check if backup exists
        if [ ! -d "backend_backup" ]; then
          echo "‚ùå No backup found for rollback!"
          exit 1
        fi

        echo "üì¶ Rolling back to previous version..."

        # Stop services
        sudo supervisorctl stop projectmeats-staging

        # Restore backup
        rm -rf backend
        mv backend_backup backend

        # Restart services
        sudo supervisorctl start projectmeats-staging
        sleep 10
        sudo systemctl reload nginx

        echo "‚úÖ Rollback completed successfully!"
        ROLLBACK_SCRIPT

  rollback-backend-production:
    name: Rollback Backend Production
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'rollback'
    environment: prod2-backend

    steps:
    - name: üîê Setup SSH with password authentication
      run: |
        sudo apt-get update
        sudo apt-get install -y sshpass
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.PRODUCTION_HOST }} >> ~/.ssh/known_hosts

    - name: ‚è™ Rollback production to previous version
      env:
        SSHPASS: ${{ secrets.SSH_PASSWORD }}
      run: |
        sshpass -e ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'ROLLBACK_SCRIPT'
        set -e

        echo "üö® Starting EMERGENCY PRODUCTION rollback process..."

        cd /home/django/ProjectMeats

        # Check if backup exists
        if [ ! -d "backend_backup" ]; then
          echo "‚ùå No backup found for rollback!"
          echo "üö® CRITICAL: Cannot rollback production!"
          exit 1
        fi

        echo "üì¶ Rolling back production to previous version..."

        # Stop services
        sudo supervisorctl stop projectmeats-production

        # Restore backup
        rm -rf backend
        mv backend_backup backend

        # Restart services
        sudo supervisorctl start projectmeats-production
        sleep 15
        sudo systemctl reload nginx

        echo "‚úÖ PRODUCTION rollback completed successfully!"
        echo "üîç Please verify production is working correctly"
        ROLLBACK_SCRIPT

  rollback-frontend-production:
    name: Rollback Frontend Production
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'rollback'
    environment: prod2-frontend

    steps:
    - name: üîê Setup SSH with password authentication
      run: |
        sudo apt-get update
        sudo apt-get install -y sshpass
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.PRODUCTION_HOST }} >> ~/.ssh/known_hosts

    - name: ‚è™ Rollback production frontend
      env:
        SSHPASS: ${{ secrets.SSH_PASSWORD }}
      run: |
        sshpass -e ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'ROLLBACK_SCRIPT'
        set -e

        echo "üö® Starting EMERGENCY PRODUCTION frontend rollback..."

        # Find the most recent backup
        BACKUP_DIR=$(ls -1t /var/www/ProjectMeats/frontend/build.backup.* 2>/dev/null | head -n1)

        if [ -z "$BACKUP_DIR" ]; then
          echo "‚ùå No backup found for rollback!"
          echo "üö® CRITICAL: Cannot rollback production frontend!"
          exit 1
        fi

        echo "üì¶ Rolling back to: $BACKUP_DIR"

        # Remove current build
        sudo rm -rf /var/www/ProjectMeats/frontend/build

        # Restore backup
        sudo cp -r "$BACKUP_DIR" /var/www/ProjectMeats/frontend/build

        # Set permissions
        sudo chown -R www-data:www-data /var/www/ProjectMeats/frontend/build
        sudo chmod -R 755 /var/www/ProjectMeats/frontend/build

        # Reload nginx
        sudo systemctl reload nginx

        echo "‚úÖ PRODUCTION frontend rollback completed!"
        ROLLBACK_SCRIPT