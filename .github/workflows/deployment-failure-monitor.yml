name: Monitor Staging Deployment Failures

"on":
  workflow_run:
    workflows: 
      - "Deploy Frontend to UAT2 Staging"
      - "Deploy Backend to UAT2 Staging"
    types:
      - completed

jobs:
  check-deployment-failure:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    
    permissions:
      issues: write
      actions: read
      contents: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Get workflow run details
      id: workflow-details
      run: |
        echo "workflow_name=${{ github.event.workflow_run.name }}" >> $GITHUB_OUTPUT
        echo "workflow_id=${{ github.event.workflow_run.id }}" >> $GITHUB_OUTPUT
        echo "workflow_url=${{ github.event.workflow_run.html_url }}" >> $GITHUB_OUTPUT
        echo "head_sha=${{ github.event.workflow_run.head_sha }}" >> $GITHUB_OUTPUT
        echo "head_branch=${{ github.event.workflow_run.head_branch }}" >> $GITHUB_OUTPUT
        echo "triggering_actor=${{ github.event.workflow_run.triggering_actor.login }}" >> $GITHUB_OUTPUT

    - name: Get workflow run logs
      id: get-logs
      run: |
        # Get failed jobs for this workflow run
        JOBS_JSON=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }}/jobs")
        
        # Extract failed job information
        FAILED_JOBS=$(echo "$JOBS_JSON" | jq -r '.jobs[] | select(.conclusion == "failure") | "\(.name): \(.html_url)"')
        
        # Get failed job logs (simplified - get first failed job's log)  
        FIRST_FAILED_JOB_ID=$(echo "$JOBS_JSON" | jq -r '.jobs[] | select(.conclusion == "failure") | .id' | head -1)
        
        if [ -n "$FIRST_FAILED_JOB_ID" ]; then
          # Get logs for the failed job (last 50 lines to keep issue size manageable)
          LOGS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/jobs/$FIRST_FAILED_JOB_ID/logs" | tail -50)
          
          # Save logs to environment file for the GitHub script
          echo "ERROR_LOGS<<EOF" >> $GITHUB_OUTPUT
          echo "$LOGS" >> $GITHUB_OUTPUT  
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "ERROR_LOGS=No specific error logs available. Check the workflow run for details." >> $GITHUB_OUTPUT
        fi
        
        echo "FAILED_JOBS<<EOF" >> $GITHUB_OUTPUT
        echo "$FAILED_JOBS" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create issue title and determine component
      id: issue-prep
      run: |
        WORKFLOW_NAME="${{ steps.workflow-details.outputs.workflow_name }}"
        if [[ "$WORKFLOW_NAME" == *"Frontend"* ]]; then
          COMPONENT="Frontend"
        else
          COMPONENT="Backend"
        fi
        DATE=$(date +%Y-%m-%d)
        TITLE="Fix ${COMPONENT} UAT2 Staging Deployment Failure - ${DATE}"
        echo "component=$COMPONENT" >> $GITHUB_OUTPUT
        echo "title=$TITLE" >> $GITHUB_OUTPUT

    - name: Create failure issue
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const workflowName = "${{ steps.workflow-details.outputs.workflow_name }}";
          const workflowUrl = "${{ steps.workflow-details.outputs.workflow_url }}";
          const headSha = "${{ steps.workflow-details.outputs.head_sha }}";
          const headBranch = "${{ steps.workflow-details.outputs.head_branch }}";
          const triggeringActor = "${{ steps.workflow-details.outputs.triggering_actor }}";
          const component = "${{ steps.issue-prep.outputs.component }}";
          const issueTitle = "${{ steps.issue-prep.outputs.title }}";
          const runId = "${{ github.event.workflow_run.id }}";
          
          const failedJobs = process.env.FAILED_JOBS || 'Details available in workflow run';
          const errorLogs = process.env.ERROR_LOGS || 'No specific error logs available';
          
          // Create issue body using template literals carefully  
          let issueBody = '';
          issueBody += '## üö® ' + component + ' UAT2 Staging Deployment Failed\n\n';
          issueBody += '**Workflow:** ' + workflowName + '\n';
          issueBody += '**Branch:** ' + headBranch + '\n';
          issueBody += '**Commit:** ' + headSha + '\n';
          issueBody += '**Triggered by:** @' + triggeringActor + '\n';
          issueBody += '**Failed on:** ' + new Date().toLocaleString() + '\n\n';
          issueBody += '### üîó Workflow Run Details\n';
          issueBody += '- **Direct Link:** [View Failed Workflow Run](' + workflowUrl + ')\n';
          issueBody += '- **Run ID:** ' + runId + '\n\n';
          issueBody += '### ‚ùå Failed Jobs\n';
          issueBody += '```\n' + failedJobs + '\n```\n\n';
          issueBody += '### üìã Error Details\n';
          issueBody += '<details>\n<summary>Click to view error logs (last 50 lines)</summary>\n\n';
          issueBody += '```\n' + errorLogs + '\n```\n';
          issueBody += '</details>\n\n';
          issueBody += '### üîß Resolution Instructions\n\n';
          issueBody += '**Important:** Any pull requests created to fix this issue should be made against the **`development`** branch, not `main`.\n\n';
          issueBody += '### üìù Next Steps\n';
          issueBody += '1. Review the error logs above and the [workflow run](' + workflowUrl + ')\n';
          issueBody += '2. Investigate the root cause of the deployment failure\n';
          issueBody += '3. Create a pull request with the fix targeting the **`development`** branch\n';
          issueBody += '4. Test the fix in the development environment before merging\n';
          issueBody += '5. Monitor the next deployment to ensure the issue is resolved\n\n';
          issueBody += '### üìö Related Documentation\n';
          issueBody += '- [Deployment Technical Reference](./docs/reference/deployment-technical-reference.md)\n';
          issueBody += '- [Troubleshooting Guide](./archived/docs/DEPLOYMENT_GUIDE.md#-troubleshooting)\n';
          issueBody += '- [Documentation Hub](./docs/README.md)\n\n';
          issueBody += '---\n*This issue was automatically created by the deployment failure monitoring workflow.*';

          // Create the issue
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: issueTitle,
            body: issueBody,
            assignees: ['copilot'],
            labels: ['bug', 'deployment', 'staging', 'urgent']
          });
          
          console.log('Created issue #' + issue.data.number + ': ' + issueTitle);
          
          // Add a comment with additional context
          const contextComment = 'üîç **Additional Context:**\n\n' +
            'This deployment failure was automatically detected. Please:\n\n' +
            '1. Check if this is a recurring issue by searching for similar deployment failures\n' +
            '2. Review recent changes to the ' + component.toLowerCase() + ' that might have caused this failure\n' +
            '3. Verify that all environment variables and secrets are properly configured\n' +
            '4. Consider if this requires an immediate hotfix or can be addressed in the normal development cycle\n\n' +
            'If this is a critical issue affecting production readiness, please escalate accordingly.';
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issue.data.number,
            body: contextComment
          });
        env:
          FAILED_JOBS: ${{ steps.get-logs.outputs.FAILED_JOBS }}
          ERROR_LOGS: ${{ steps.get-logs.outputs.ERROR_LOGS }}