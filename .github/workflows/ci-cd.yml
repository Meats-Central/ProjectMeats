name: CI → DEV → UAT → (approval) → PROD

on:
  push:
    branches: [ "dev" ]        # Trigger the full pipeline on pushes to dev
  workflow_dispatch:            # Allow manual runs

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  REPO_IMAGE: ghcr.io/${{ github.repository }}
  PYTHON_VERSION: "3.12"        # Adjust to your backend runtime
  NODE_VERSION: "20"            # Adjust to your frontend runtime

jobs:
  build_test_package:
    name: Build & Test → Push Images
    runs-on: ubuntu-latest

    outputs:
      back_image: ${{ steps.tags.outputs.BACK }}
      front_image: ${{ steps.tags.outputs.FRONT }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ----- Backend (Python) -----
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('backend/requirements.txt') }}

      - name: Install backend deps
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt

      # ----- Frontend (Node) -----
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend deps
        working-directory: frontend
        run: npm ci

      # ----- Tests -----
      - name: Unit tests (backend + frontend)
        env:
          DJANGO_SETTINGS_MODULE: projectmeats.settings.development
          DJANGO_SECRET_KEY: test-secret
          DATABASE_URL: "sqlite:////tmp/test.db"
          CI: "true"
        run: |
          # Prefer a Makefile if you have one; fall back to sensible defaults
          if grep -q '^test:' Makefile 2>/dev/null; then
            make test
          else
            # Backend tests
            if [ -f "pytest.ini" ] || [ -f "pyproject.toml" ] || [ -d "tests" ]; then
              python -m pytest -q || true
            fi
            if [ -f "backend/manage.py" ]; then
              python backend/manage.py test -v 2 || true
            fi
            # Frontend tests
            if [ -f "frontend/package.json" ]; then
              (cd frontend && CI=true npm test -- --watchAll=false --passWithNoTests) || true
            fi
          fi
      # ----- Prepare image repo -----
      - name: Prepare GHCR image names (lowercase owner/repo)
        id: prep
        run: |
            owner_lower=$(echo "${GITHUB_REPOSITORY_OWNER}" | tr '[:upper:]' '[:lower:]')
            repo_name_lower=$(echo "${GITHUB_REPOSITORY##*/}" | tr '[:upper:]' '[:lower:]')
            echo "base=ghcr.io/${owner_lower}/${repo_name_lower}" >> "$GITHUB_OUTPUT"

      # ----- Build and Push image GHCR -----
      - name: Login to GHCR
        run: echo "${{ github.token }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build backend image
        run: |
            docker build -f Dockerfile.backend \
            -t ${{ steps.prep.outputs.base }}-backend:${{ github.sha }} .
            docker tag \
            ${{ steps.prep.outputs.base }}-backend:${{ github.sha }} \
            ${{ steps.prep.outputs.base }}-backend:latest

      - name: Build frontend image
        run: |
            docker build -f Dockerfile.frontend \
            -t ${{ steps.prep.outputs.base }}-frontend:${{ github.sha }} .
            docker tag \
            ${{ steps.prep.outputs.base }}-frontend:${{ github.sha }} \
            ${{ steps.prep.outputs.base }}-frontend:latest

      - name: Push images
        run: |
            docker push ${{ steps.prep.outputs.base }}-backend:${{ github.sha }}
            docker push ${{ steps.prep.outputs.base }}-backend:latest
            docker push ${{ steps.prep.outputs.base }}-frontend:${{ github.sha }}
            docker push ${{ steps.prep.outputs.base }}-frontend:latest

      - name: Export image tags
        id: tags
        run: |
            echo "BACK=${{ steps.prep.outputs.base }}-backend:${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "FRONT=${{ steps.prep.outputs.base }}-frontend:${{ github.sha }}" >> $GITHUB_OUTPUT

  deploy_dev:
    name: Deploy to DEV (auto)
    needs: [ build_test_package ]
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Checkout (for scripts)
        uses: actions/checkout@v4

      - name: Render dev.env and image.env on runner
        shell: bash
        env:
          ENV_NAME: dev
          APP_DOMAIN: ${{ vars.APP_DOMAIN }}
          API_DOMAIN: ${{ vars.API_DOMAIN }}                 
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          CACHE_URL: ${{ secrets.CACHE_URL }}/1         
          BACK: ${{ needs.build_test_package.outputs.back_image }}
          FRONT: ${{ needs.build_test_package.outputs.front_image }}
          REACT_APP_API_BASE_URL: https://${{ vars.APP_DOMAIN }}/api/v1
          NODE_ENV: development
          REACT_APP_ENVIRONMENT: development
          REACT_APP_AI_ASSISTANT_ENABLED: ${{ vars.REACT_APP_AI_ASSISTANT_ENABLED }}  
          REACT_APP_ENABLE_DOCUMENT_UPLOAD: ${{ vars.REACT_APP_ENABLE_DOCUMENT_UPLOAD }}  
          REACT_APP_ENABLE_CHAT_EXPORT: ${{ vars.REACT_APP_ENABLE_CHAT_EXPORT }}  
          REACT_APP_MAX_FILE_SIZE: ${{ vars.REACT_APP_MAX_FILE_SIZE }}  
          REACT_APP_SUPPORTED_FILE_TYPES: ${{ vars.REACT_APP_SUPPORTED_FILE_TYPES }}  
          REACT_APP_ENABLE_DEBUG: ${{ vars.REACT_APP_ENABLE_DEBUG }}  
          REACT_APP_ENABLE_DEVTOOLS: ${{ vars.REACT_APP_ENABLE_DEVTOOLS }}
          LETSENCRYPT_EMAIL: ${{ secrets.LETSENCRYPT_EMAIL }}  
        run: |
          set -euo pipefail
          cat > ${ENV_NAME}.env <<EOF
          DJANGO_SETTINGS_MODULE=projectmeats.settings.development
          DJANGO_DEBUG=1
          SECRET_KEY=${DJANGO_SECRET_KEY}
          DATABASE_URL=${DATABASE_URL}
          CACHE_URL=${CACHE_URL}
          ALLOWED_HOSTS=${APP_DOMAIN}
          CORS_ALLOWED_ORIGINS=https://${APP_DOMAIN}
          CSRF_TRUSTED_ORIGINS=https://${APP_DOMAIN}
          APP_ENV=${ENV_NAME}
          REACT_APP_API_BASE_URL=${REACT_APP_API_BASE_URL}
          # Environment
          NODE_ENV=${NODE_ENV}
          REACT_APP_ENVIRONMENT=${REACT_APP_ENVIRONMENT}
          REACT_APP_AI_ASSISTANT_ENABLED=${REACT_APP_AI_ASSISTANT_ENABLED}
          REACT_APP_ENABLE_DOCUMENT_UPLOAD=${REACT_APP_ENABLE_DOCUMENT_UPLOAD}
          REACT_APP_ENABLE_CHAT_EXPORT=${REACT_APP_ENABLE_CHAT_EXPORT}
          REACT_APP_MAX_FILE_SIZE=${REACT_APP_MAX_FILE_SIZE}
          REACT_APP_SUPPORTED_FILE_TYPES=${REACT_APP_SUPPORTED_FILE_TYPES}
          # Development Features
          REACT_APP_ENABLE_DEBUG=${REACT_APP_ENABLE_DEBUG}
          REACT_APP_ENABLE_DEVTOOLS=${REACT_APP_ENABLE_DEVTOOLS}
          LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}
          EOF

          cat > image.env <<EOF
          IMAGE_TAG_BACKEND=${BACK}
          IMAGE_TAG_FRONTEND=${FRONT}
          EOF

      - name: Upload env files to DEV server
        env:
            SSH_HOST: ${{ secrets.SSH_HOST }}
            SSH_USER: ${{ secrets.SSH_USER }}
            SSH_KEY:  ${{ secrets.SSH_KEY }}
            ENV_NAME: dev
        run: |
            set -euo pipefail
            # Write key to a file
            echo "$SSH_KEY" > id_rsa
            chmod 600 id_rsa
            ssh -i id_rsa -o StrictHostKeyChecking=no "$SSH_USER@$SSH_HOST" "mkdir -p /opt/projectmeats/env && chmod 700 /opt/projectmeats/env"
            scp -i id_rsa -o StrictHostKeyChecking=no ${ENV_NAME}.env "$SSH_USER@$SSH_HOST:/opt/projectmeats/env/${ENV_NAME}.env"
            scp -i id_rsa -o StrictHostKeyChecking=no image.env "$SSH_USER@$SSH_HOST:/opt/projectmeats/env/image.env"
            ssh -i id_rsa -o StrictHostKeyChecking=no "$SSH_USER@$SSH_HOST" "chmod 600 /opt/projectmeats/env/${ENV_NAME}.env /opt/projectmeats/env/image.env"

      - name: Upload compose file to DEV
        env:
            SSH_HOST: ${{ secrets.SSH_HOST }}
            SSH_USER: ${{ secrets.SSH_USER }}
        run: |
            set -euo pipefail
            # we already have id_rsa from the previous step
            scp -i id_rsa -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
            docker-compose.dev.yml "$SSH_USER@$SSH_HOST:/opt/projectmeats/docker-compose.dev.yml"

      - name: Deploy to DEV (SSH → compose up)
        env:
            SSH_HOST: ${{ secrets.SSH_HOST }}
            SSH_USER: ${{ secrets.SSH_USER }}
            GITHUB_TOKEN: ${{ github.token }}
            BACK: ${{ needs.build_test_package.outputs.back_image }}
            FRONT: ${{ needs.build_test_package.outputs.front_image }}
            APP_DOMAIN: ${{ vars.APP_DOMAIN }}
            SSH_KEY_PATH: ${{ github.workspace }}/id_rsa
        run: |
            bash deploy/scripts/deploy_via_compose.sh "$SSH_HOST" "$SSH_USER" "IGNORED" dev "$BACK" "$FRONT" "$APP_DOMAIN"

    #   - name: Smoke check (public)
    #     run: |
    #       curl -fsS "https://${{ vars.APP_DOMAIN }}/healthz" >/dev/null

  promote_and_deploy_uat:
    name: Promote → Deploy to UAT
    runs-on: ubuntu-latest
    needs: [ deploy_dev, build_test_package ]
    environment: uat

    steps:
      - name: Checkout (for scripts)
        uses: actions/checkout@v4

      - name: Render uat.env and image.env on runner
        shell: bash
        env:
          ENV_NAME: uat
          APP_DOMAIN: ${{ vars.APP_DOMAIN }}
          API_DOMAIN: ${{ vars.API_DOMAIN }}                  
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}          
          BACK: ${{ needs.build_test_package.outputs.back_image }}
          FRONT: ${{ needs.build_test_package.outputs.front_image }}
          REACT_APP_API_BASE_URL: https://${{ vars.APP_DOMAIN }}/api/v1
          NODE_ENV: production
          REACT_APP_ENVIRONMENT: production
          REACT_APP_AI_ASSISTANT_ENABLED: ${{ vars.REACT_APP_AI_ASSISTANT_ENABLED }}  
          REACT_APP_ENABLE_DOCUMENT_UPLOAD: ${{ vars.REACT_APP_ENABLE_DOCUMENT_UPLOAD }}  
          REACT_APP_ENABLE_CHAT_EXPORT: ${{ vars.REACT_APP_ENABLE_CHAT_EXPORT }}  
          REACT_APP_MAX_FILE_SIZE: ${{ vars.REACT_APP_MAX_FILE_SIZE }}  
          REACT_APP_SUPPORTED_FILE_TYPES: ${{ vars.REACT_APP_SUPPORTED_FILE_TYPES }}  
          REACT_APP_ENABLE_DEBUG: ${{ vars.REACT_APP_ENABLE_DEBUG }}  
          REACT_APP_ENABLE_DEVTOOLS: ${{ vars.REACT_APP_ENABLE_DEVTOOLS }}
          LETSENCRYPT_EMAIL: ${{ secrets.LETSENCRYPT_EMAIL }}
        run: |
          set -euo pipefail
          cat > ${ENV_NAME}.env <<EOF
          DJANGO_SETTINGS_MODULE=projectmeats.settings.staging
          API_DOMAIN=${API_DOMAIN}
          DJANGO_DEBUG=0
          SECRET_KEY=${DJANGO_SECRET_KEY}
          DATABASE_URL=${DATABASE_URL}
          ALLOWED_HOSTS=${APP_DOMAIN}
          CORS_ALLOWED_ORIGINS=https://${APP_DOMAIN}
          CSRF_TRUSTED_ORIGINS=https://${APP_DOMAIN}
          APP_ENV=${ENV_NAME}
          REACT_APP_API_BASE_URL=${REACT_APP_API_BASE_URL}
          # Environment
          NODE_ENV=${NODE_ENV}
          REACT_APP_ENVIRONMENT=${REACT_APP_ENVIRONMENT}
          REACT_APP_AI_ASSISTANT_ENABLED=${REACT_APP_AI_ASSISTANT_ENABLED}
          REACT_APP_ENABLE_DOCUMENT_UPLOAD=${REACT_APP_ENABLE_DOCUMENT_UPLOAD}
          REACT_APP_ENABLE_CHAT_EXPORT=${REACT_APP_ENABLE_CHAT_EXPORT}
          REACT_APP_MAX_FILE_SIZE=${REACT_APP_MAX_FILE_SIZE}
          REACT_APP_SUPPORTED_FILE_TYPES=${REACT_APP_SUPPORTED_FILE_TYPES}
          # Development Features
          REACT_APP_ENABLE_DEBUG=${REACT_APP_ENABLE_DEBUG}
          REACT_APP_ENABLE_DEVTOOLS=${REACT_APP_ENABLE_DEVTOOLS}
          LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}
          EOF

          cat > image.env <<EOF
          IMAGE_TAG_BACKEND=${BACK}
          IMAGE_TAG_FRONTEND=${FRONT}
          EOF

      - name: Upload env files to UAT server
        env:
            SSH_HOST: ${{ secrets.SSH_HOST }}
            SSH_USER: ${{ secrets.SSH_USER }}
            SSH_KEY:  ${{ secrets.SSH_KEY }}
            ENV_NAME: uat
        run: |
            set -euo pipefail
            # Write key to a file
            echo "$SSH_KEY" > id_rsa
            chmod 600 id_rsa
            ssh -i id_rsa -o StrictHostKeyChecking=no "$SSH_USER@$SSH_HOST" "mkdir -p /opt/projectmeats/env && chmod 700 /opt/projectmeats/env"
            scp -i id_rsa -o StrictHostKeyChecking=no ${ENV_NAME}.env "$SSH_USER@$SSH_HOST:/opt/projectmeats/env/${ENV_NAME}.env"
            scp -i id_rsa -o StrictHostKeyChecking=no image.env "$SSH_USER@$SSH_HOST:/opt/projectmeats/env/image.env"
            ssh -i id_rsa -o StrictHostKeyChecking=no "$SSH_USER@$SSH_HOST" "chmod 600 /opt/projectmeats/env/${ENV_NAME}.env /opt/projectmeats/env/image.env"

      - name: Upload compose file to UAT
        env:
            SSH_HOST: ${{ secrets.SSH_HOST }}
            SSH_USER: ${{ secrets.SSH_USER }}
        run: |
            set -euo pipefail
            # we already have id_rsa from the previous step
            scp -i id_rsa -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
            docker-compose.uat.yml "$SSH_USER@$SSH_HOST:/opt/projectmeats/docker-compose.uat.yml"

      - name: Deploy to UAT (SSH → compose up)
        env:
            SSH_HOST: ${{ secrets.SSH_HOST }}
            SSH_USER: ${{ secrets.SSH_USER }}
            GITHUB_TOKEN: ${{ github.token }}
            BACK: ${{ needs.build_test_package.outputs.back_image }}
            FRONT: ${{ needs.build_test_package.outputs.front_image }}
            APP_DOMAIN: ${{ vars.APP_DOMAIN }}
            SSH_KEY_PATH: ${{ github.workspace }}/id_rsa
        run: |
            bash deploy/scripts/deploy_via_compose.sh "$SSH_HOST" "$SSH_USER" "IGNORED" uat "$BACK" "$FRONT" "$APP_DOMAIN"

    #   - name: Smoke check (public)
    #     run: |
    #       curl -fsS "https://${{ vars.APP_DOMAIN }}/healthz" >/dev/null

#   await_prod_approval:
#     name: Await PROD approval
#     runs-on: ubuntu-latest
#     needs: [ promote_and_deploy_uat ]
#     environment:
#       name: prod
#       url: https://${{ vars.APP_DOMAIN }}          # from Environment: prod
#     steps:
#       - run: echo "Manual approval handled by the protected 'prod' Environment (required reviewers)."

  deploy_prod:
    name: Deploy to PROD
    runs-on: ubuntu-latest
    needs: [ promote_and_deploy_uat,build_test_package ]
    environment: prod

    steps:
      - name: Checkout (for scripts)
        uses: actions/checkout@v4

      - name: Render prod.env and image.env on runner
        shell: bash
        env:
          ENV_NAME: prod
          APP_DOMAIN: ${{ vars.APP_DOMAIN }}
          API_DOMAIN: ${{ vars.API_DOMAIN }}                  
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}          
          BACK: ${{ needs.build_test_package.outputs.back_image }}
          FRONT: ${{ needs.build_test_package.outputs.front_image }}
          REACT_APP_API_BASE_URL: https://${{ vars.APP_DOMAIN }}/api/v1
          NODE_ENV: production
          REACT_APP_ENVIRONMENT: production
          REACT_APP_AI_ASSISTANT_ENABLED: ${{ vars.REACT_APP_AI_ASSISTANT_ENABLED }}  
          REACT_APP_ENABLE_DOCUMENT_UPLOAD: ${{ vars.REACT_APP_ENABLE_DOCUMENT_UPLOAD }}  
          REACT_APP_ENABLE_CHAT_EXPORT: ${{ vars.REACT_APP_ENABLE_CHAT_EXPORT }}  
          REACT_APP_MAX_FILE_SIZE: ${{ vars.REACT_APP_MAX_FILE_SIZE }}  
          REACT_APP_SUPPORTED_FILE_TYPES: ${{ vars.REACT_APP_SUPPORTED_FILE_TYPES }}  
          REACT_APP_ENABLE_DEBUG: ${{ vars.REACT_APP_ENABLE_DEBUG }}  
          REACT_APP_ENABLE_DEVTOOLS: ${{ vars.REACT_APP_ENABLE_DEVTOOLS }}
          LETSENCRYPT_EMAIL: ${{ secrets.LETSENCRYPT_EMAIL }}
        run: |
          set -euo pipefail
          cat > ${ENV_NAME}.env <<EOF
          DJANGO_SETTINGS_MODULE=projectmeats.settings.production
          API_DOMAIN=${API_DOMAIN}
          DJANGO_DEBUG=0
          SECRET_KEY=${DJANGO_SECRET_KEY}
          DATABASE_URL=${DATABASE_URL}
          ALLOWED_HOSTS=${APP_DOMAIN}
          CORS_ALLOWED_ORIGINS=https://${APP_DOMAIN}
          CSRF_TRUSTED_ORIGINS=https://${APP_DOMAIN}
          APP_ENV=${ENV_NAME}
          REACT_APP_API_BASE_URL=${REACT_APP_API_BASE_URL}
          # Environment
          NODE_ENV=${NODE_ENV}
          REACT_APP_ENVIRONMENT=${REACT_APP_ENVIRONMENT}
          REACT_APP_AI_ASSISTANT_ENABLED=${REACT_APP_AI_ASSISTANT_ENABLED}
          REACT_APP_ENABLE_DOCUMENT_UPLOAD=${REACT_APP_ENABLE_DOCUMENT_UPLOAD}
          REACT_APP_ENABLE_CHAT_EXPORT=${REACT_APP_ENABLE_CHAT_EXPORT}
          REACT_APP_MAX_FILE_SIZE=${REACT_APP_MAX_FILE_SIZE}
          REACT_APP_SUPPORTED_FILE_TYPES=${REACT_APP_SUPPORTED_FILE_TYPES}
          # Development Features
          REACT_APP_ENABLE_DEBUG=${REACT_APP_ENABLE_DEBUG}
          REACT_APP_ENABLE_DEVTOOLS=${REACT_APP_ENABLE_DEVTOOLS}
          LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}
          EOF

          cat > image.env <<EOF
          IMAGE_TAG_BACKEND=${BACK}
          IMAGE_TAG_FRONTEND=${FRONT}
          EOF

      - name: Upload env files to PROD server
        env:
            SSH_HOST: ${{ secrets.SSH_HOST }}
            SSH_USER: ${{ secrets.SSH_USER }}
            SSH_KEY:  ${{ secrets.SSH_KEY }}
            ENV_NAME: prod
        run: |
            set -euo pipefail
            # Write key to a file
            echo "$SSH_KEY" > id_rsa
            chmod 600 id_rsa
            ssh -i id_rsa -o StrictHostKeyChecking=no "$SSH_USER@$SSH_HOST" "mkdir -p /opt/projectmeats/env && chmod 700 /opt/projectmeats/env"
            scp -i id_rsa -o StrictHostKeyChecking=no ${ENV_NAME}.env "$SSH_USER@$SSH_HOST:/opt/projectmeats/env/${ENV_NAME}.env"
            scp -i id_rsa -o StrictHostKeyChecking=no image.env "$SSH_USER@$SSH_HOST:/opt/projectmeats/env/image.env"
            ssh -i id_rsa -o StrictHostKeyChecking=no "$SSH_USER@$SSH_HOST" "chmod 600 /opt/projectmeats/env/${ENV_NAME}.env /opt/projectmeats/env/image.env"

      - name: Upload compose file to PROD
        env:
            SSH_HOST: ${{ secrets.SSH_HOST }}
            SSH_USER: ${{ secrets.SSH_USER }}
        run: |
            set -euo pipefail
            # we already have id_rsa from the previous step
            scp -i id_rsa -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
            docker-compose.prod.yml "$SSH_USER@$SSH_HOST:/opt/projectmeats/docker-compose.prod.yml"

      - name: Deploy to PROD (SSH → compose up)
        env:
            SSH_HOST: ${{ secrets.SSH_HOST }}
            SSH_USER: ${{ secrets.SSH_USER }}
            GITHUB_TOKEN: ${{ github.token }}
            BACK: ${{ needs.build_test_package.outputs.back_image }}
            FRONT: ${{ needs.build_test_package.outputs.front_image }}
            APP_DOMAIN: ${{ vars.APP_DOMAIN }}
            SSH_KEY_PATH: ${{ github.workspace }}/id_rsa
        run: |
          bash deploy/scripts/deploy_via_compose.sh "$SSH_HOST" "$SSH_USER" "IGNORED" prod "$BACK" "$FRONT" "$APP_DOMAIN"

    #   - name: Post-deploy health
    #     run: |
    #       curl -fsS "https://${{ vars.APP_DOMAIN }}/healthz" >/dev/null
